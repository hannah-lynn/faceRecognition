{"version":3,"sources":["components/Navigation/Navigation.js","components/Logo/Logo.js","components/Rank/Rank.js","components/ImageLinkForm/ImageLinkForm.js","components/FaceRecognition/FaceRecognition.js","components/Signin/Signin.js","components/Register/Register.js","App.js","serviceWorker.js","index.js","components/Logo/face.svg"],"names":["Navigation","onRouteChange","isSignedIn","style","display","justifyContent","onClick","className","Logo","options","max","height","width","paddingTop","src","Face","alt","Rank","name","entries","ImageLinkForm","onInputChange","onSubmit","type","onChange","FaceRecognition","imageUrl","box","id","top","topRow","right","rightCol","bottom","bottomRow","left","leftCol","Signin","props","onEmailChange","event","setState","signInEmail","target","value","onPasswordChange","signInPassword","onSubmitSignIn","preventDefault","fetch","method","headers","body","JSON","stringify","email","state","password","then","response","json","user","loadUser","this","htmlFor","href","React","Component","Register","onNameChange","class","for","app","Clarifai","App","apiKey","particleOptions","particles","number","density","enable","value_area","data","joined","calculateFaceLocation","clarifaiFace","outputs","regions","region_info","bounding_box","image","document","getElementById","Number","left_col","top_row","right_col","bottom_row","displayFaceBox","input","models","predict","FACE_DETECT_MODEL","count","Object","assign","route","params","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.53a999b1.chunk.js","sourcesContent":["import React from 'react';\n\nconst Navigation = ({ onRouteChange, isSignedIn }) => {\n  return isSignedIn === true ? (\n    <nav style={{ display: 'flex', justifyContent: 'flex-end' }}>\n      <p\n        onClick={() => onRouteChange('signout')}\n        className='f3 link dim black underline pa3 pointer'\n      >\n        Sign Out\n      </p>\n    </nav>\n  ) : (\n    <nav style={{ display: 'flex', justifyContent: 'flex-end' }}>\n      <p\n        onClick={() => onRouteChange('signin')}\n        className='f3 link dim black underline pa3 pointer'\n      >\n        Sign In\n      </p>\n      <p\n        onClick={() => onRouteChange('register')}\n        className='f3 link dim black underline pa3 pointer'\n      >\n        Register\n      </p>\n    </nav>\n  );\n};\n\nexport default Navigation;\n","import React from 'react';\nimport Tilt from 'react-tilt';\nimport './Logo.css';\nimport Face from './face.svg';\n\nconst Logo = () => {\n  return (\n    <div className='ma4 mt0'>\n      <Tilt\n        className='Tilt'\n        options={{ max: 65 }}\n        style={{ height: 150, width: 150 }}\n      >\n        <div className='Tilt-inner pa3'>\n          {' '}\n          <img style={{ paddingTop: '4px' }} src={Face} alt='logo' />{' '}\n        </div>\n      </Tilt>\n    </div>\n  );\n};\n\nexport default Logo;\n","import React from 'react';\n\nconst Rank = ({ name, entries }) => {\n  return (\n    <div>\n      <div className='white f3'>{`${name}, your entry count is:`}</div>\n      <div className='white f1'>{entries}</div>\n    </div>\n  );\n};\n\nexport default Rank;\n","import React from 'react';\nimport './ImageLinkForm.css';\n\nconst ImageLinkForm = ({ onInputChange, onSubmit }) => {\n  return (\n    <div>\n      <p className='f3'>{'This magic app will detect faces, give it a try'}</p>\n      <div className='center'>\n        <div className='form center pa4 br3 shadow-5'>\n          <input\n            className='f4 pa2 w-70 center'\n            type='text'\n            onChange={onInputChange}\n          />\n          <button\n            className='w-30 grow f4 link ph3 pv2 dib white bg-light-purple'\n            onClick={onSubmit}\n          >\n            Detect\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default ImageLinkForm;\n","import React from 'react';\nimport './FaceRecognition.css';\n\nconst FaceRecognition = ({ imageUrl, box }) => {\n  return (\n    <div className='center ma'>\n      <div className='absolute mt2'>\n        <img\n          id='inputImage'\n          className='width:500px height:auto'\n          src={imageUrl}\n          alt=''\n        />\n        <div\n          className='bounding-box'\n          style={{\n            top: box.topRow,\n            right: box.rightCol,\n            bottom: box.bottomRow,\n            left: box.leftCol,\n          }}\n        ></div>\n      </div>\n    </div>\n  );\n};\n\nexport default FaceRecognition;\n","import React, { useReducer } from 'react';\n\nclass Signin extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      signInEmail: '',\n      signInPassword: '',\n    };\n  }\n\n  onEmailChange = (event) => {\n    this.setState({ signInEmail: event.target.value });\n  };\n  onPasswordChange = (event) => {\n    this.setState({ signInPassword: event.target.value });\n  };\n\n  onSubmitSignIn = (event) => {\n    event.preventDefault();\n    fetch('http://localhost:3000/signin', {\n      method: 'post',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        email: this.state.signInEmail,\n        password: this.state.signInPassword,\n      }),\n    })\n      .then((response) => response.json())\n      .then((user) => {\n        if (user.id) {\n          this.props.loadUser(user);\n          this.props.onRouteChange('home');\n        }\n      });\n  };\n  render() {\n    const { onRouteChange } = this.props;\n    return (\n      <article className='br3 ba dark-gray b--black-10 mv4 w-100 w-50-m w-25-l mw5 center shadow-5'>\n        <main className='pa4 black-80'>\n          <form className='measure'>\n            <fieldset id='sign_up' className='ba b--transparent ph0 mh0'>\n              <legend className='f2 fw6 ph0 mh0'>Sign In</legend>\n              <div className='mt3'>\n                <label className='db fw6 lh-copy f6' htmlFor='email-address'>\n                  Email\n                </label>\n                <input\n                  className='pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100'\n                  type='email'\n                  name='email-address'\n                  id='email-address'\n                  onChange={this.onEmailChange}\n                />\n              </div>\n              <div className='mv3'>\n                <label className='db fw6 lh-copy f6' htmlFor='password'>\n                  Password\n                </label>\n                <input\n                  className='b pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100'\n                  type='password'\n                  name='password'\n                  id='password'\n                  onChange={this.onPasswordChange}\n                />\n              </div>\n            </fieldset>\n            <div className=''>\n              <input\n                onClick={this.onSubmitSignIn}\n                className='b ph3 pv2 input-reset ba b--black bg-transparent grow pointer f6 dib'\n                type='submit'\n                value='Sign in'\n              />\n            </div>\n            <div className='lh-copy mt3'>\n              <p\n                onClick={() => onRouteChange('register')}\n                href='#0'\n                className='f6 link dim black db pointer'\n              >\n                Register\n              </p>\n            </div>\n          </form>\n        </main>\n      </article>\n    );\n  }\n}\n\nexport default Signin;\n","import React from 'react';\n\nclass Register extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      email: '',\n      password: '',\n      name: '',\n    };\n  }\n\n  onNameChange = (event) => {\n    this.setState({ name: event.target.value });\n  };\n\n  onEmailChange = (event) => {\n    this.setState({ email: event.target.value });\n  };\n  onPasswordChange = (event) => {\n    this.setState({ password: event.target.value });\n  };\n\n  onSubmitSignIn = (event) => {\n    event.preventDefault();\n    fetch('http://localhost:3000/register', {\n      method: 'post',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify({\n        email: this.state.email,\n        password: this.state.password,\n        name: this.state.name,\n      }),\n    })\n      .then((response) => response.json())\n      .then((user) => {\n        if (user) {\n          this.props.loadUser(user);\n          this.props.onRouteChange('home');\n        }\n      });\n  };\n  render() {\n    return (\n      <article className='br3 ba dark-gray b--black-10 mv4 w-100 w-50-m w-25-l mw5 center shadow-5'>\n        <main class='pa4 black-80'>\n          <form className='measure'>\n            <fieldset id='sign_up' className='ba b--transparent ph0 mh0'>\n              <legend className='f2 fw6 ph0 mh0'>Register</legend>\n              <div className='mt3'>\n                <label className='db fw6 lh-copy f6' for='name'>\n                  Name\n                </label>\n                <input\n                  className='pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100'\n                  type='text'\n                  name='name'\n                  id='name'\n                  onChange={this.onNameChange}\n                />\n              </div>\n              <div className='mt3'>\n                <label className='db fw6 lh-copy f6' htmlFor='email-address'>\n                  Email\n                </label>\n                <input\n                  className='pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100'\n                  type='email'\n                  name='email-address'\n                  id='email-address'\n                  onChange={this.onEmailChange}\n                />\n              </div>\n              <div className='mv3'>\n                <label className='db fw6 lh-copy f6' htmlFor='password'>\n                  Password\n                </label>\n                <input\n                  className='b pa2 input-reset ba bg-transparent hover-bg-black hover-white w-100'\n                  type='password'\n                  name='password'\n                  id='password'\n                  onChange={this.onPasswordChange}\n                />\n              </div>\n            </fieldset>\n            <div className=''>\n              <input\n                onClick={this.onSubmitSignIn}\n                className='b ph3 pv2 input-reset ba b--black bg-transparent grow pointer f6 dib'\n                type='submit'\n                value='Register'\n              />\n            </div>\n          </form>\n        </main>\n      </article>\n    );\n  }\n}\n\nexport default Register;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Navigation from './components/Navigation/Navigation';\nimport Logo from './components/Logo/Logo';\nimport Rank from './components/Rank/Rank';\nimport Particles from 'react-particles-js';\nimport ImageLinkForm from './components/ImageLinkForm/ImageLinkForm';\nimport Clarifai from 'clarifai';\nimport FaceRecognition from './components/FaceRecognition/FaceRecognition';\nimport Signin from './components/Signin/Signin';\nimport Register from './components/Register/Register';\n\nconst app = new Clarifai.App({\n  apiKey: '098fbea59d2b443492559381bad28f85',\n});\n\nconst particleOptions = {\n  particles: {\n    number: {\n      value: 50,\n      density: {\n        enable: true,\n        value_area: 400,\n      },\n    },\n  },\n};\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      input: '',\n      imageUrl: '',\n      box: {},\n      route: 'signin',\n      isSignedIn: false,\n      user: {\n        id: '',\n        name: '',\n        email: '',\n        entries: 0,\n        joined: '',\n      },\n    };\n  }\n\n  loadUser = (data) => {\n    this.setState({\n      user: {\n        id: data.id,\n        name: data.name,\n        email: data.email,\n        entries: data.entries,\n        joined: data.joined,\n      },\n    });\n  };\n\n  calculateFaceLocation = (data) => {\n    const clarifaiFace =\n      data.outputs[0].data.regions[0].region_info.bounding_box;\n    const image = document.getElementById('inputImage');\n    const width = Number(image.width);\n    const height = Number(image.height);\n    return {\n      leftCol: clarifaiFace.left_col * width,\n      topRow: clarifaiFace.top_row * height,\n      rightCol: width - clarifaiFace.right_col * width,\n      bottomRow: height - clarifaiFace.bottom_row * height,\n    };\n  };\n\n  displayFaceBox = (box) => {\n    this.setState({ box: box });\n  };\n\n  onInputChange = (event) => {\n    this.setState({ input: event.target.value });\n  };\n\n  onSubmit = () => {\n    this.setState({ imageUrl: this.state.input });\n    app.models\n      .predict(Clarifai.FACE_DETECT_MODEL, this.state.input)\n      .then((response) => {\n        if (response) {\n          fetch('http://localhost:3000/image', {\n            method: 'put',\n            headers: { 'Content-Type': 'application/json' },\n            body: JSON.stringify({\n              id: this.state.user.id,\n            }),\n          })\n            .then((response) => response.json())\n            .then((count) => {\n              this.setState(Object.assign(this.state.user, { entries: count }));\n            });\n        }\n        this.displayFaceBox(this.calculateFaceLocation(response));\n\n        // .then((response) => {\n        //   console.log(response);\n        // });\n      });\n  };\n\n  onRouteChange = (route) => {\n    if (route === 'signout') {\n      this.setState({ isSignedIn: false });\n    } else if (route === 'home') {\n      this.setState({ isSignedIn: true });\n    }\n    this.setState({ route: route });\n  };\n\n  render() {\n    const { isSignedIn, imageUrl, route, box } = this.state;\n    return (\n      <div className='App'>\n        <Particles className='particles' params={particleOptions} />\n        <Navigation\n          isSignedIn={isSignedIn}\n          onRouteChange={this.onRouteChange}\n        />\n        {this.state.route === 'home' ? (\n          <div>\n            <Logo />\n            <Rank\n              name={this.state.user.name}\n              entries={this.state.user.entries}\n            />\n            <ImageLinkForm\n              onInputChange={this.onInputChange}\n              onSubmit={this.onSubmit}\n            />\n            <FaceRecognition box={box} imageUrl={imageUrl} />\n          </div>\n        ) : route === 'signin' ? (\n          <Signin loadUser={this.loadUser} onRouteChange={this.onRouteChange} />\n        ) : (\n          <Register\n            loadUser={this.loadUser}\n            onRouteChange={this.onRouteChange}\n          />\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/face.6fb51fc1.svg\";"],"sourceRoot":""}